# TODO
# - setup starship prompt
#############
#  ALIASES  #
#############

# common utility aliases
alias note="vim $(date +%F).md" # used a ton for taking notes
alias activate="source .env/bin/activate"

# workaround because ubuntu doesn't follow naming conventions apparently
if [[ $(type apt) ]]
then
  alias -g python='python3'
  alias -g pip='pip3'
  alias -g fd='fdfind'
  alias -g bat='batcat'
fi

# standard aliases
alias rm='rm -I'                  # or possibly rm -Irf
alias cp='cp -i'
alias df='df -h'
alias ls='ls -h --color=yes'      # or exa
alias ll='ls -l'                  # ...
alias la='ls -a'                  # ...
alias lah='ls -la'                # ...
alias grep='grep --color=yes'     # or ripgrep (binary name is rg)
alias fgrep='fgrep --color=auto'  # ...
alias egrep='egrep --color=auto'  # ...
alias mkdir='mkdir -p'
alias mkexec='chmod +x'
alias home='cd $HOME'
[[ $(type exa) ]] && alias tree='exa -T' || alias tree='tree -CF'



##############
#  SETTINGS  #
##############

# - History
HISTFILE=$HOME/.history
HISTSIZE=1000
SAVEHIST=200
# - Behaviour
setopt bang_hist hist_ignore_space hist_beep beep
setopt share_history inc_append_history extended_history
setopt interactive_comments # correct_all 
autoload -Uz vcs_info # gitstuff
# - Storage
setopt hist_find_no_dups hist_ignore_all_dups
setopt hist_fcntl_lock hist_reduce_blanks
setopt hist_no_functions
# - Directory Stack
setopt auto_cd
setopt auto_pushd 
setopt pushd_minus pushd_silent pushd_to_home pushd_ignore_dups 
DIRSTACKSIZE=13
# - Completion
setopt bash_auto_list list_packed list_rows_first list_types
setopt glob_complete auto_param_slash
# - Globbing
setopt glob extended_glob
setopt bad_pattern
setopt bare_glob_qual brace_ccl glob_dots ksh_glob mark_dirs
# - VIM
# jeffreytse/zsh-vi-mode plugin makes this redundant
# bindkey -v
# zmodload zsh/complist
# autoload -Uz edit-command-line
# zle -N edit-command-line
# bindkey -M vicmd v edit-command-line
# bindkey -M menuselect 'h' vi-backward-char
# bindkey -M menuselect 'l' vi-forward-char
# bindkey -M menuselect 'j' vi-down-line-or-history
# bindkey -M menuselect 'k' vi-up-line-or-history
# export KEYTIMEOUT=1
# - Style
setopt prompt_subst
autoload -U colors && colors



#########
#  ENV  #
#########

# set environment variables taking system state into consideration
PATH="$PATH:$HOME/.local/bin:$HOME/bin"
[[ $(type emacs) ]] && PATH="$PATH:$HOME/.emacs.d/bin"
[[ $(type cabal) ]] && PATH="$PATH:$HOME/.cabal/bin"
[[ $(type perl) ]] && PATH="$PATH:$HOME/.perl5/bin"  # needed for perl5
[[ -f /usr/local/cuda/bin ]] && PATH="$PATH:/usr/local/cuda/bin"  # needed for nvidia cuda+cudnn

export PATH
export LC_CTYPE="en_CA.UTF-8"
export EDITOR="nvim"
export OPENER="xdg-open"



###########
# Plugins #
###########

if [[ -f $HOME/.zcomet/bin/zcomet.zsh ]]
then
  # source zcomet
  source $HOME/.zcomet/bin/zcomet.zsh

  # setup plugins
  #   vim
  zcomet load jeffreytse/zsh-vi-mode
  function zvm_after_init() {
     [[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh
  }
  #   jump to a parent directory without typing ../../../...
  zcomet load Tarrasch/zsh-bd
  #   remind yourself of aliases
  zcomet load MichaelAquilina/zsh-you-should-use
  export YSU_MESSAGE_POSITION="before"
  export YSU_MESSAGE_FORMAT="$(tput setaf 3)Found %alias_type for %command: %alias$(tput sgr0)"
  #   get extra autocompletions
  zcomet load zsh-users/zsh-completions
  #   fish-like syntax highlighting
  zcomet load zsh-users/zsh-syntax-highlighting
  #   fish-like autosuggestions
  zcomet load zsh-users/zsh-autosuggestions
  bindkey '' autosuggest-accept
else
  git clone https://github.com/agkozak/zcomet.git $HOME/.zcomet/bin
fi



############
# PROGRAMS #
############

# TODO someday try mcfly again
# TODO add espanso
# TODO autosetup ripgrep and ripgrep-all

# FZF
if [[ $(type fzf) ]]
then
  # doesn't seem to work for some reason when using fd or bat despite function definitions above
  export FZF_COMPLETION_TRIGGER='**'
  export FZF_DEFAULT_OPTS="--prompt='ðŸ”­ ' --pointer='â†’' --marker='âš—' --height 100% --layout=reverse --border=rounded --header='CTRL-C or ESC to quit'"
  if [[ $(type apt) ]]
  then
    export FZF_DEFAULT_COMMAND="fdfind --type f --hidden --follow --exclude .git"
  else
    export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"
  fi
  [[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh

  # neovim + fzf = "Neovim File fuzzy search" -> nf
  function nf {
    # ensure neovim is installed
    [[ -z $(type nvim) ]] && return

    if [[ $(type apt) ]]
    then
      selection=$(fzf --query="$@" --preview 'batcat {}')
    else
      selection=$(fzf --query="$@" --preview 'bat {}')
    fi
    if [[ -z "$selection" ]]
    then
      return
    else
      nvim $selection
    fi
  }

  # neovim + fzf + ripgrep = "Neovim Line fuzzy search" -> nl
  function nl {
    # ensure neovim and ripgrep are installed
    [[ -z $(type nvim) ]] && return
    [[ -z $(type rg) ]] && return

    # filter rg selections into fzf with preview
    if [[ $(type apt) ]]
    then
      selection=$(rg -n . | fzf --query="$@" -d ':' --preview 'batcat {1} --highlight-line {2}')
    else
      selection=$(rg -n . | fzf --query="$@" -d ':' --preview 'bat {1} --highlight-line {2}')
    fi
    if [[ -z "$selection" ]]
    then
      return
    else
      # split answer into line number and file name, then open there
      filename=$(echo $selection | awk -F ':' '{print $1}')
      linenumb=$(echo $selection | awk -F ':' '{print $2}')
      nvim $(printf "+%s %s" $linenumb $filename)
    fi
  }
fi

# RipGrep-All
if [[ $(type rga) ]]
then
  # reach for Abyss File - get path to file with matching data
  function af {
    [[ -z $(type fzf) ]] && return
    RG_PREFIX="rga --files-with-matches"
    file="$(
      FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
        fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
          --phony -q "$1" \
          --bind "change:reload:$RG_PREFIX {q}" \
          --preview-window="70%:wrap"
    )"
    echo $file
  }

  # Ripgrep-All File - attempt to open a file interactively with ripgrep-all and fzf
  function raf {
    [[ -z $(type xdg-open) ]] && return
    file=$(af)
    echo "opening $file"
    xdg-open "$file"
  }
fi

# FASD
if [[ $(type fasd) ]]
then
  eval "$(fasd --init posix-alias zsh-hook zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install)"
  [[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh
  alias v='f -e $EDITOR'
  alias o='a -e $OPENER'
fi

# NNN
if [[ $(type nnn) ]]
then
  export NNN_FIFO=/tmp/nnn.fifo

  # bookmarks
  export NNN_BMS="h:$HOME;m:$HOME/Sync/Media;n:$HOME/Sync/Notes;p:$HOME/Sync/Projects;c:$HOME/Sync/Projects/Programming"

  # plugins
  export NNN_PLUG="p:preview-tui;n:nuke;m:cmusq;g:gitroot"

  # cd on quit, better alias
  function n {
    # Block nesting of nnn in subshells
    if [[ "${NNNLVL:-0}" -ge 1 ]]; then
        echo "nnn is already running"
        return
    fi

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # If NNN_TMPFILE is set to a custom path, it must be exported for nnn.
    # To cd on quit only on ^G, remove the "export" and make sure not to
    # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    stty start undef
    stty stop undef
    stty lnext undef

    nnn $@

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
  }

  alias nnn="n -e"
  alias NNN="sudo -E n -dH"
fi



# TODO pick between starship or spaceship prompt
# TODO replace section with one of the aforementioned prompts
############
#  PROMPT  #
############

# # opens two files to compare and modify
# function merge { vimdiff $1 $2 }
#
# # abbreviates directory fish style
# function _shrink_path {
#   local paths=(${PWD/$HOME/\~}) 'cur_dir'
#   paths=(${(s:/:)paths})
#
#   # TODO shorten all but the last path name by iterating the index
#   len=$(( ${#paths[@]} - 1 ))
#   for i in $(seq 1 $len )
#   do
#     cur_dir+="${paths[$i]:0:1}"
#     cur_dir+='/'
#   done
#   cur_dir+="${paths[$(( -1 ))]}"
#   print -P "$cur_dir"
# }
#
# # updates vcs info status
# function _vcs_show {
#   setopt prompt_subst
#   autoload -Uz vcs_info
#   zstyle ':vcs_info:*' check-for-changes true
#   zstyle ':vcs_info:*' stagedstr '+'
#   zstyle ':vcs_info:*' unstagedstr '~'
#   zstyle ':vcs_info:*' patch-format "%10>..>%p%<< (%n applied)"
#   zstyle ':vcs_info:*' nvcsformats "%F{yellow}%B$(_shrink_path)%b%f"
#   zstyle ':vcs_info:*' formats '%F{yellow}%B%r/%S%%b%f %F{cyan}%b%f %F{green}%c%f %F{yellow}%u%f'
#   vcs_info
# }
#
# function preexec {
#   timer=$(( $(date +%s%0N) / 1000000000 )) # start timer
# }
#
# function precmd {
#   _vcs_show # display directory/git info
#
#   # calculate and show how much time has passed since last command execution
#   if [ $timer ]
#   then
#     now=$(( $(date +%s%0N) / 1000000000 ))
#     elapsed=$(( $now - $timer ))  # elapsed time in milliseconds
#     delta=$(print -P "\U0394")
#
#     threshold=3   # seconds to display elapsed time
#     if [[ $(( $elapsed )) -gt $threshold ]]
#     then
#       export RPROMPT="%F{cyan}$delta${elapsed}s%f "
#     else
#       export RPROMPT=""
#     fi
#   fi
#   unset timer
# }

# COLORS AND SYMBOLS
# elem=`print "\U220a"`
# userhost='%(!|%F{red}|%F{green})%B%n@%m%b%f'
# errcode="%(?||%F{red}â†¯%? )%f"
# # indicate subshell levels
# if [[ -n "$NNNLVL" ]]
# then
#   symbol='â™ž '
#   level="%B%F{yellow}%(2L|$symbol|)%b%f"
# else
#   symbol='ðŸ–¥'
#   if [[ $TMUX ]]
#   then
#     level="%B%F{yellow}%(3L|$(($SHLVL - 1))$symbol|)%b%f"
#   else
#     level="%B%F{yellow}%(2L|%L$symbol|)%b%f"
#   fi
# fi
# state=`print "âŸ¨Î¨$levelâŸ©"`
# PROMPTS
# PROMPT='$userhost $elem ${vcs_info_msg_0_}
# $errcode$state%f '

# starship prompt
if [[ $(type starship) ]]
then
  # start prompt
  eval "$(starship init zsh)"
fi











###############
# Completions #
###############

# setup standard completions with compinstall
autoload -Uz compinstall
if [[ $(type compinstall) ]]
then
  # The following lines were added by compinstall
  zstyle ':completion:*' expand prefix suffix
  zstyle ':completion:*' file-sort access
  zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
  zstyle ':completion:*' list-suffixes true
  zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]} m:{[:lower:][:upper:]}={[:upper:][:lower:]} r:|[._-]=** r:|=**' 'l:|=* r:|=*'
  zstyle ':completion:*' menu select=long
  zstyle ':completion:*' preserve-prefix '//[^/]##/'
  zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
  zstyle ':completion:*' special-dirs true
  zstyle :compinstall filename '/home/jaybee/.zshrc'
  autoload -Uz compinit
  compinit
fi
