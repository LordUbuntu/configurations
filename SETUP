My new solution to setting up all this crap:
+ User specifies packages in a plaintext file
+ A shell script function reads in from that list of packages as an array
  + It then gets the actual names (depending on the operating system) and substitutes as it goes through the array
  + At the end, it then issues a command and requests permission
  + Installs packages
+ Another script now starts the environment setup for specific programs that were installed in the previous step (checks they were first and reports that it's skipping them if they weren't)
+ Lastly, config files are copied and linked onto system where they're supposed to go, and the program finally concludes



Some nice features in the future might be a fzf selection for additional packages, and maybe each program is a fully contained module that sorts out all its own stuff?

I should consider switching to home-manger in the future, I'm basically trying to emulate the nix approach anyways :/

Now that I think about it, maybe this program should be a python script instead... but then again, posix shell is highly portable between linux systems even if it is primitive and unpleasant...


#!/bin/sh
# install.sh
# read packages into array variable from specified plaintext file
# substitute package names as needed for system and request install

# setup.sh
# for each specified program, setup environment and other relevant bits for that program, informing of any missing packages at the end

# config.sh
# for each program in dotfiles, copy over configs for programs that are installed...



See test.sh for an example of how to temporarily give control to user for encountered problems...






Maybe instead I could do something like what dotfile managers do?
- manage configs in a dotfile folder synced with git like what I've already been doing, but instead each program that is named has an associated directory to copy from and an associated package which is installed if it is not installed already (before linking dotfiles), and not linking dotfiles for programs not installed unless forced.


remember to use `link` command
